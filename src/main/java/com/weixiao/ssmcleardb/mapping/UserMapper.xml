<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">

<!-- 不使用namespace的话sql搜索定位会比较方便 -->
<!-- User -->
<mapper namespace="User">
	
	<resultMap id="userResult" type="com.weixiao.ssmcleardb.model.User">
        <result property="id" column="ID"/>
        <result property="name" column="NAME"/>
        <result property="password" column="PASSWORD"/>
        <result property="mobile" column="MOBILE"/>
        <result property="email" column="EMAIL"/>
        <result property="status" column="STATUS"/>
        <result property="trueName" column="TRUE_NAME"/>
        <result property="userCode" column="USER_CODE"/>
        <result property="photo" column="PHOTO"/>
        <result property="createTime" column="CREATE_TIME"/>
        <result property="updateTime" column="UPDATE_TIME"/>
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="commonColumns">
	    <![CDATA[
        	`ID`,
        	`NAME`,
        	`PASSWORD`,
        	`MOBILE`,
        	`EMAIL`,
        	`STATUS`,
        	`TRUE_NAME`,
        	`USER_CODE`,
        	`PHOTO`,
        	`CREATE_TIME`,
        	`UPDATE_TIME`
	    ]]>
	</sql>
	
	<sql id="commonAliasColumns">
	    <![CDATA[
        	x.`ID`,
        	x.`NAME`,
        	x.`PASSWORD`,
        	x.`MOBILE`,
        	x.`EMAIL`,
        	x.`STATUS`,
        	x.`TRUE_NAME`,
        	x.`USER_CODE`,
        	x.`PHOTO`,
        	x.`CREATE_TIME`,
        	x.`UPDATE_TIME`
	    ]]>
	</sql>

	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="insert" useGeneratedKeys="true" keyProperty="id" parameterType="com.weixiao.ssmcleardb.model.User">
    <![CDATA[
        INSERT INTO `user` (
        	`ID`,
        	`NAME`,
        	`PASSWORD`,
        	`MOBILE`,
        	`EMAIL`,
        	`STATUS`,
        	`TRUE_NAME`,
        	`USER_CODE`,
        	`PHOTO`,
        	`CREATE_TIME`,
        	`UPDATE_TIME`
        ) VALUES (
        	#{id},
        	#{name},
        	#{password},
        	#{mobile},
        	#{email},
        	#{status},
        	#{trueName},
        	#{userCode},
        	#{photo},
        	#{createTime},
        	#{updateTime}
        )
    ]]>
	</insert>
    
	<update id="update" parameterType="com.weixiao.ssmcleardb.model.User">
    <![CDATA[
        UPDATE `user` SET
	        `NAME` = #{name},
	        `PASSWORD` = #{password},
	        `MOBILE` = #{mobile},
	        `EMAIL` = #{email},
	        `STATUS` = #{status},
	        `TRUE_NAME` = #{trueName},
	        `USER_CODE` = #{userCode},
	        `PHOTO` = #{photo},
	        `CREATE_TIME` = #{createTime},
	        `UPDATE_TIME` = #{updateTime}
        WHERE 
	        `ID` = #{id}
    ]]>
	</update>
	
	<delete id="delete" parameterType="map">
    <![CDATA[
        delete from `user`
    ]]>
		<include refid="dynamicWhere"/>
    </delete>
    
    <delete id="batchDelete" parameterType="list">
        delete from `user` where `ID` IN 
        <foreach collection="list" item="ids"  open="(" separator="," close=")">   
#{ids}        </foreach> 
    </delete>
    
    <delete id="batchDeleteByLocalId" parameterType="list">
        delete from `user` where `LOCAL_ID` in
        <foreach collection="list" item="ids"  open="(" separator="," close=")">   
#{ids}		</foreach> 
    </delete>
    
    <select id="getById" resultMap="userResult">
		SELECT <include refid="commonColumns" />
	    <![CDATA[
		    FROM `user` 
	        WHERE 
		        `ID` = #{id}
	    ]]>
	</select>
	
	<select id="getByIds" resultMap="userResult">
		SELECT <include refid="commonColumns" />
		FROM `user` WHERE `ID` IN 
		<foreach collection="list" item="ids"  open="(" separator="," close=")">   
#{ids}        </foreach>  
	</select>
	
	<sql id="dynamicWhere">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>	      				
	       <if test="@Ognl@isNotEmpty(id)">
				AND `ID` = #{id}
			</if>
	       <if test="@Ognl@isNotEmpty(name)">
				AND `NAME` = #{name}
			</if>
	       <if test="@Ognl@isNotEmpty(password)">
				AND `PASSWORD` = #{password}
			</if>
	       <if test="@Ognl@isNotEmpty(mobile)">
				AND `MOBILE` = #{mobile}
			</if>
	       <if test="@Ognl@isNotEmpty(email)">
				AND `EMAIL` = #{email}
			</if>
	       <if test="@Ognl@isNotEmpty(status)">
				AND `STATUS` = #{status}
			</if>
	       <if test="@Ognl@isNotEmpty(trueName)">
				AND `TRUE_NAME` = #{trueName}
			</if>
	       <if test="@Ognl@isNotEmpty(userCode)">
				AND `USER_CODE` = #{userCode}
			</if>
	       <if test="@Ognl@isNotEmpty(photo)">
				AND `PHOTO` = #{photo}
			</if>
	       <if test="@Ognl@isNotEmpty(createTimeBegin)">
				AND `CREATE_TIME` >= #{createTimeBegin}
		   </if>
		   <if test="@Ognl@isNotEmpty(createTimeEnd)">
				AND `CREATE_TIME` &lt;= #{createTimeEnd}
		   </if>
	       <if test="@Ognl@isNotEmpty(updateTimeBegin)">
				AND `UPDATE_TIME` >= #{updateTimeBegin}
		   </if>
		   <if test="@Ognl@isNotEmpty(updateTimeEnd)">
				AND `UPDATE_TIME` &lt;= #{updateTimeEnd}
		   </if>
		</where>
	</sql>
		
    <select id="count" resultType="long">
        SELECT count(*) FROM `user` 
		<include refid="dynamicWhere"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="pageSelect" resultMap="userResult">
    	SELECT <include refid="commonColumns" />
	    FROM `user` 
		<include refid="dynamicWhere"/>
		
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>
    
    <!--
    	提供一个备选的查询实现，有特定的需求在这上面实现，或再添加自定义的查询，不要破坏默认的查询实现，以免发生不可预知的错误
    -->
    <select id="secondSelect" resultMap="userResult">
    	SELECT <include refid="commonAliasColumns" />
	    FROM user x 
		<where>	      				
	       <if test="@Ognl@isNotEmpty(id)">
				AND x.`ID` = #{id}
			</if>
	       <if test="@Ognl@isNotEmpty(name)">
				AND x.`NAME` = #{name}
			</if>
	       <if test="@Ognl@isNotEmpty(password)">
				AND x.`PASSWORD` = #{password}
			</if>
	       <if test="@Ognl@isNotEmpty(mobile)">
				AND x.`MOBILE` = #{mobile}
			</if>
	       <if test="@Ognl@isNotEmpty(email)">
				AND x.`EMAIL` = #{email}
			</if>
	       <if test="@Ognl@isNotEmpty(status)">
				AND x.`STATUS` = #{status}
			</if>
	       <if test="@Ognl@isNotEmpty(trueName)">
				AND x.`TRUE_NAME` = #{trueName}
			</if>
	       <if test="@Ognl@isNotEmpty(userCode)">
				AND x.`USER_CODE` = #{userCode}
			</if>
	       <if test="@Ognl@isNotEmpty(photo)">
				AND x.`PHOTO` = #{photo}
			</if>
	       <if test="@Ognl@isNotEmpty(createTimeBegin)">
				AND x.`CREATE_TIME` >= #{createTimeBegin}
		   </if>
		   <if test="@Ognl@isNotEmpty(createTimeEnd)">
				AND x.`CREATE_TIME` &lt;= #{createTimeEnd}
		   </if>
	       <if test="@Ognl@isNotEmpty(updateTimeBegin)">
				AND x.`UPDATE_TIME` >= #{updateTimeBegin}
		   </if>
		   <if test="@Ognl@isNotEmpty(updateTimeEnd)">
				AND x.`UPDATE_TIME` &lt;= #{updateTimeEnd}
		   </if>
		</where>
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>

	
</mapper>

